[
    {
        "id": "answer1", 
        "date" : "12/15/2021 11:21",
        "textResponse" :"Use the built-in .reversed(/) function, To also access the original index, use enumerate() on your list before passing it to reversed():",
        "votes" : 1516,
        "accepted": "false",
        "user" : "1",
        "questionId": "ques1"
    },
    {
        "id": "answer2", 
        "date" : "10/21/2021 15:34",
        "textResponse":"ECMAScript 6 (ES6) introduces a new type of literal, namely template literals. They have many features, variable interpolation among others, but most importantly for this question, they can be multiline. A template literal is delimited by backticks:",
        "codeResponse" : "var html = ` <div> <span>Some HTML here</span> </div> `;",
        "votes" : 4045,
        "accepted" : true,
        "userId" : "2",
        "questionId": "ques2"
    },
    {
        "id": "answer3", 
        "date" : "10/22/2021 19:53",
        "textResponse"  : "I'm am very disappointed by the accepted answers in this question. This will not scale. If you read the fine print on cursor.skip( ): The cursor.skip() method is often expensive because it requires the server to walk from the beginning of the collection or index to get the offset or skip position before beginning to return result. As offset (e.g. pageNumber above) increases, cursor.skip() will become slower and more CPU intensive. With larger collections, cursor.skip() may become IO bound.  To achieve pagination in a scaleable way combine a limit( ) along with at least one filter criterion, a createdOn date suits many purposes.",
        "codeResponse" : " MyModel.find( { createdOn: { $lte: request.createdOnBefore } } )  .limit( 10 )  .sort( '-createdOn' )",
        "votes" : 317,
        "accepted" : false,
        "userId" : "3",
        "questionId": "ques3"
    },
    {
        "id": "answer4", 
        "date" : "12/25/2021 21:10",
        "textResponse" : "Think of it like you're just calling JavaScript functions. You can't use a for loop where the arguments to a function call would go: See how the function tbody is being passed a for loop as an argument leading to a syntax error. But you can make an array, and then pass that in as an argument:",
        "codeResponse" : "MyModel.find({ createdOn: { $lte: request.createdOnBefore } } ) .limit( 10 ) .sort('-createdOn' )",
        "votes" : 1538,
        "accepted" : true,
        "userId" : "4",
        "questionId": "ques4"
    }
]